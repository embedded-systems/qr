/*
 * interpreter_engine: 
 *
 *	Author: Sijmen Woutersen
 */
 
#ifndef INTERPRETER_ENGINE_H
#define INTERPRETER_ENGINE_H

#include "bool.h"
#include "instructions.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "x32.h"

#define ALLOW_DISCARD TRUE
#define ALLOW_EXEC_OUTSIDE_CODEMEM


/*
 * error codes generated by the interpreter
 */
enum ERR_CODES {
	ERR_NOERROR = 0,			/* no error occured */
	
	ERR_INVALID_OPCODE,		/* opcode incorrect (invalid instruction) */
	ERR_INVALID_TYPE,			/* type/size incorrect (invalid instruction) */
	ERR_UNIMPLEMENTED,		/* unimplemented opcode */
	
	ERR_OUT_OF_STACK,			/* out of memory for stack */
	ERR_MEMREAD_ERROR,		/* memory read error */
	ERR_MEMWRITE_ERROR,		/* memory write error */
	ERR_PC_ERROR,					/* program counter out of bounds (invalid jump?) */
	
	ERR_OVERFLOW,					/* overflow exception */
	ERR_DIV0,							/* division by zero exception */

	ERR_TRAPPED,					/* interpreter is trapped, need interrupt or exit */

	ERR_EXIT_PROGRAM			/* no error; program finished */
};

/*
 * interpreter info structure
 */
typedef struct {
	unsigned char* memory;				/* pointer to memory */
	int memory_size;							/* size of memory */
	int program_size;							/* size of program in memory */
	
	/* proc control registers */
	unsigned long pc, sp, ap, lp, fp, el;				
	
	/* stack offset used for printing the stack */
	long stack_offset;
	
	unsigned long executed;				/* number of instructions executed */
	unsigned long stackpeak;			/* maximum number of bytes used by stack */
	unsigned long aligned;				/* aligned memory actions */
	unsigned long unaligned;			/* unaligned memory actions */
	
	unsigned vid;
	
	BOOL allow_discard;						/* allow the use of the discard instruction */
	BOOL trapped;									/* interpreter is trapped (breakpoint) */
	BOOL overflow, div0;					/* overflow/division by zero flags, these
																			automatically reset after 1 instruction
																*/
	BOOL out_of_memory;
	
	int analysis[MAX_OPCODE_ID];			/* number of executions per opcode */
} Interpreter;

/*
 * value info structure:
 *	holds any kind of variable
 */
typedef struct {
	int type;							/* type (see instructions.h) */
	int size;							/* size (bytes) */
	unsigned char* data;	/* raw data */
} Value;

/* buffer size for file reading */
#define BUFF_SIZE 1024

/* returns the sign of a data pointer (pos = true) */
#define SIGN(s) ((s[0] & 0x80) == 0)

/* create an interpreter info structure */
Interpreter* create_interpreter(int);
/* reset the interpreter to startup state */
void reset(Interpreter*);
/* load a program onto the interpreters memory */
BOOL load_program(FILE*, Interpreter*, int);
/* execute one instruction */
int execute(Interpreter*);
/* cause an interrupt (takes address to jump to and new execution level)*/
int interrupt(Interpreter*, int, int);
/* destroy the interpreter (free memory) */
void destroy_interpreter(Interpreter*);
/* print error message and exit app */
void error(Interpreter*, char*);
/* dump the stack trace to a stream */
void dumpstack(Interpreter*, FILE*, int);
/* dump the state to a stream */
int dumpstate(Interpreter*, FILE*);

/* setup a function call (returns error code) */
int setup_call(Interpreter* interpreter, Value* params[], int count, Value* result);
/* jump to a location */
BOOL jump(Interpreter* interpreter, int address);


/* create values */
Value* create_int(long);
Value* create_long(long);
Value* create_char(char);
Value* create_short(long);
Value* create_uint(unsigned long);
Value* create_ulong(unsigned long);
Value* create_uchar(unsigned char);
Value* create_ushort(unsigned long);
Value* create_void();
Value* create_ptr(unsigned long);

/* parse values */
int parse_int(Value*);
long parse_long(Value*);
char parse_char(Value*);
short parse_short(Value*);
unsigned int parse_uint(Value*);
unsigned long parse_ulong(Value*);
unsigned char parse_uchar(Value*);
unsigned short parse_ushort(Value*);

/* create values */
Value* create_integer(long long, int);
Value* create_unsigned(unsigned long long, int);
void destroy_value(Value* value);

/* parse values */
long long signed parse_signed(Value*);
long long unsigned parse_unsigned(Value*);

/* get the top of the stack as value */
BOOL pop_value(Interpreter*, Value*);
/* set the top of the stack as value */
BOOL push_value(Interpreter*, Value*);
/* get any value from memory */
BOOL get_value(Interpreter*, Value*, int);
#endif
